stages:
  - build
  - deploy

# Pipeline immer erzeugen – auch wenn alle Jobs sonst "skipped" wären
workflow:
  rules:
    - when: always

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  IMAGE_TAG: "latest"
  IMAGE_PREFIX: "$CI_REGISTRY_IMAGE"
  CACHE_DIR: ".buildx-cache"
  ENDPOINT_ID: "21"
  # Zentrales Docker-Hub-Repo
  DOCKERHUB_REPO: "docker.io/krakia/regress"

# No-Op, damit immer mindestens 1 Job existiert
ci_noop:
  stage: build
  image: alpine:3.19
  rules:
    - when: always
  script:
    - echo "No buildable changes detected. CI is alive ✅"

.docker-build: &docker-build
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - echo "Logging in to GitLab Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    # Docker Hub Login (Access Token als Passwort)
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker buildx create --use || docker buildx use default
    - mkdir -p "$CACHE_DIR"
  script:
    - >
      docker buildx build --pull --push
      --build-arg BUILDKIT_INLINE_CACHE=1
      --cache-from=type=local,src="$CACHE_DIR"
      --cache-to=type=local,dest="$CACHE_DIR-new",mode=max
      --cache-from=type=registry,ref="$CI_REGISTRY_IMAGE/cache:$CI_JOB_NAME"
      --cache-to=type=registry,ref="$CI_REGISTRY_IMAGE/cache:$CI_JOB_NAME",mode=max
      -t "$IMAGE_PREFIX/$IMAGE_NAME:$IMAGE_TAG"
      -t "$DOCKERHUB_REPO:${IMAGE_NAME}-${IMAGE_TAG}"
      -t "$DOCKERHUB_REPO:${IMAGE_NAME}-${CI_COMMIT_SHORT_SHA}"
      -f "$DOCKERFILE" .
    - rm -rf "$CACHE_DIR" && mv "$CACHE_DIR-new" "$CACHE_DIR"
  cache:
    key:
      files:
        - Cargo.lock
        - frontend/package-lock.json
      prefix: "$CI_JOB_NAME"
    paths:
      - ~/.cargo/registry
      - ~/.cargo/git
      - ~/.cache/sccache
      - target
      - frontend/node_modules/.cache
      - .buildx-cache
  timeout: 90m
  needs: []

build_api_gateway:
  <<: *docker-build
  variables:
    IMAGE_NAME: api-gateway
    DOCKERFILE: services/api-gateway/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/api-gateway/**/*

build_pdf_ingest:
  <<: *docker-build
  variables:
    IMAGE_NAME: pdf-ingest
    DOCKERFILE: services/pdf-ingest/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/pdf-ingest/**/*

build_text_extraction:
  <<: *docker-build
  variables:
    IMAGE_NAME: text-extraction
    DOCKERFILE: services/text-extraction/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/text-extraction/**/*

build_pipeline_runner:
  <<: *docker-build
  variables:
    IMAGE_NAME: pipeline-runner
    DOCKERFILE: services/pipeline-runner/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/pipeline-runner/**/*

build_prompt_manager:
  <<: *docker-build
  variables:
    IMAGE_NAME: prompt-manager
    DOCKERFILE: services/prompt-manager/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/prompt-manager/**/*

build_pipeline_api:
  <<: *docker-build
  variables:
    IMAGE_NAME: pipeline-api
    DOCKERFILE: services/pipeline-api/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/pipeline-api/**/*

build_metrics:
  <<: *docker-build
  variables:
    IMAGE_NAME: metrics
    DOCKERFILE: services/metrics/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/metrics/**/*

build_history_service:
  <<: *docker-build
  variables:
    IMAGE_NAME: history-service
    DOCKERFILE: services/history-service/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - Cargo.toml
        - Cargo.lock
        - shared/**/*
        - services/history-service/**/*

build_frontend:
  <<: *docker-build
  variables:
    IMAGE_NAME: frontend
    DOCKERFILE: frontend/Dockerfile
  rules:
    - if: '$FORCE_BUILD_ALL == "1"'
    - changes:
        - .gitlab-ci.yml
        - docker-compose.yml
    - changes:
        - frontend/**/*

deploy_stack:
  stage: deploy
  image: curlimages/curl:latest
  needs:
    - job: build_api_gateway
      optional: true
    - job: build_pdf_ingest
      optional: true
    - job: build_text_extraction
      optional: true
    - job: build_pipeline_runner
      optional: true
    - job: build_prompt_manager
      optional: true
    - job: build_pipeline_api
      optional: true
    - job: build_metrics
      optional: true
    - job: build_history_service
      optional: true
    - job: build_frontend
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $PORTAINER_TOKEN'
      changes:
        - docker-compose.yml
        - services/**/*
        - frontend/**/*
  script:
    - echo "Deploying updated docker-compose to Portainer..."
    - |
      set -euo pipefail
      COMPOSE_FILE="docker-compose.yml"
      if [ ! -f "$COMPOSE_FILE" ]; then
        echo "No compose file found ($COMPOSE_FILE). Skipping deploy."
        exit 0
      fi
      echo "Using compose file: $COMPOSE_FILE"
      CONTENT=$(sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e ':a;N;$!ba;s/\n/\\n/g' "$COMPOSE_FILE")
      # Reachability check, um lange Hänger zu vermeiden
      if ! curl -sS --connect-timeout 5 -o /dev/null "https://portainer.adesso.claims/api/status"; then
        echo "Portainer not reachable from runner. Skipping deploy."
        exit 0
      fi
      curl -sS --fail-with-body --connect-timeout 10 --max-time 120 --retry 3 --retry-all-errors \
        -X POST "https://portainer.adesso.claims/api/stacks?method=string&type=1&endpointId=$ENDPOINT_ID" \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{\"Name\":\"regress\",\"StackFileContent\":\"$CONTENT\"}"
