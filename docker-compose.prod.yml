version: "3.9"

# Gemeinsames Overlay-Netz muss bereits existieren (backendnet, overlay, attachable=ON)
networks:
  backendnet:
    external: true
    name: backendnet

services:
  db-migrate:
    image: docker.adesso.claims/regress:db-migrator-latest
    networks: [ backendnet ]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable&keepalives=1&keepalives_idle=30&keepalives_interval=10"
    deploy:
      restart_policy: { condition: none }
      update_config: { order: start-first, parallelism: 1 }
  api-gateway:
    image: docker.adesso.claims/regress:api-gateway-release
    networks: [backendnet]
    ports: ["8080:8080"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  pdf-ingest:
    image: docker.adesso.claims/regress:pdf-ingest-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
      MESSAGE_BROKER_URL: "kafka:9092"
    ports: ["8081:8081"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  text-extraction:
    image: docker.adesso.claims/regress:text-extraction-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
      MESSAGE_BROKER_URL: "kafka:9092"
    ports: ["8083:8083"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  pipeline-runner:
    image: docker.adesso.claims/regress:pipeline-runner-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
      MESSAGE_BROKER_URL: "kafka:9092"
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
      RUST_LOG: "info,pipeline_runner=debug,openai_client=debug"
      PROMPT_MANAGER_URL: "http://prompt-manager:8082"
    ports: ["8087:8087"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  prompt-manager:
    image: docker.adesso.claims/regress:prompt-manager-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
      RUST_LOG: "info,prompt_manager=debug,tower_http=info"
    ports: ["8082:8082"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  pipeline-api:
    image: docker.adesso.claims/regress:pipeline-api-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
    ports: ["8084:8084"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  metrics:
    image: docker.adesso.claims/regress:metrics-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
    ports: ["8085:8085"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  history-service:
    image: docker.adesso.claims/regress:history-service-release
    networks: [backendnet]
    environment:
      DATABASE_URL: "postgresql://regress_app:nITj%22%2B0%28f89F@haproxy:5432/regress?sslmode=disable"
      MESSAGE_BROKER_URL: "kafka:9092"
      SERVER_PORT: "8090"
      # FÃ¼r klickbare PDF-Links in der UI (vom Browser erreichbar)
      PDF_INGEST_URL: "http://${PUBLIC_HOST:-helium.adesso.claims}:8081"
      RUST_LOG: "info,history_service=debug"
      RUST_BACKTRACE: "1"
    ports: ["8090:8090"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }

  frontend:
    image: docker.adesso.claims/regress:frontend-release
    networks: [backendnet]
    environment:
      PUBLIC_HOST: "${PUBLIC_HOST:-helium.adesso.claims}"
      VITE_INGEST_URL:  "http://${PUBLIC_HOST}:8080"
      VITE_HISTORY_WS:  "ws://${PUBLIC_HOST}:8090"
      VITE_API_URL:     "http://${PUBLIC_HOST}:8084"
      VITE_HISTORY_URL: "http://${PUBLIC_HOST}:8090"
      VITE_UPLOAD_API_URL: "http://${PUBLIC_HOST}:8081"
    ports: ["3001:80"]
    deploy:
      restart_policy: { condition: any, delay: 5s, max_attempts: 10, window: 120s }
