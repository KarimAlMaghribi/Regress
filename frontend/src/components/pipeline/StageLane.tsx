/* --------------------------------------------------------------------------
 *  StageLane â€“Â eine Spalte im Pipelineâ€‘Editor
 *  --------------------------------------------------------------------------
 *  â€¢ Zeigt alle PromptNodes eines gegebenen PromptType
 *  â€¢ Greift auf den globalen Zustand via usePipelineStore()
 *  â€¢ Addâ€‘Button legt sofort eine neue Karte an (nur Dummyâ€‘Text)
 *  â€¢ TODO: Dragâ€‘&â€‘Dropâ€‘Reihenfolge mit @dndâ€‘kit (siehe Kommentar unten)
 * ------------------------------------------------------------------------ */

import React from 'react';
import {
  Box,
  Paper,
  Typography,
  IconButton,
  Stack,
  Tooltip,
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';

import { usePipelineStore } from '@/store/usePipelineStore';
import type { PromptType, UUID } from '@/types/pipeline';

interface StageLaneProps {
  promptType: PromptType;
  title?: string;
  /**Â Farbakzent fÃ¼r die Lane â€“ z.â€¯B. '#90caf9'Â */
  accentColor?: string;
}

export default function StageLane({
                                    promptType,
                                    title,
                                    accentColor = '#e0e0e0',
                                  }: StageLaneProps) {
  const nodes = usePipelineStore(s =>
      s.pipeline.nodes.filter(n => n.type === promptType),
  );
  const addNode = usePipelineStore(s => s.addNode);
  const removeNode = usePipelineStore(s => s.removeNode);

  const createCard = () =>
      addNode({
        text: 'Neuer Prompt',
        type: promptType,
      } as any); //Â type cast, Weightâ€†/â€†Confâ€‘Threshold optional

  return (
      <Paper
          elevation={3}
          sx={{
            p: 1,
            width: 260,
            minHeight: 400,
            bgcolor: accentColor,
            display: 'flex',
            flexDirection: 'column',
          }}
      >
        {/* Laneâ€‘Header --------------------------------------------------- */}
        <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              mb: 1,
            }}
        >
          <Typography variant="subtitle2">
            {title ?? promptType.replace(/Prompt$/, '')}
          </Typography>
          <Tooltip title="Prompt hinzufÃ¼gen">
            <IconButton size="small" onClick={createCard}>
              <AddIcon fontSize="inherit" />
            </IconButton>
          </Tooltip>
        </Box>

        {/* Kartenâ€‘Liste -------------------------------------------------- */}
        <Stack spacing={1} sx={{ flexGrow: 1, overflowY: 'auto' }}>
          {nodes.map(n => (
              <PromptCard
                  key={n.id}
                  id={n.id}
                  label={n.text}
                  onDelete={() => removeNode(n.id)}
              />
          ))}
        </Stack>
      </Paper>
  );
}

/* --------------------------------------------------------------------
 *  Interne Miniâ€‘Komponente "PromptCard"
 *  â€“Â Kann spÃ¤ter in eine eigene Datei wandern.
 *  â€“Â Dragâ€‘&â€‘Dropâ€‘Props folgen, sobald dndâ€‘kit eingebunden ist.
 * ------------------------------------------------------------------ */
interface PromptCardProps {
  id: UUID;
  label: string;
  onDelete: () => void;
}

function PromptCard({ label, onDelete }: PromptCardProps) {
  return (
      <Paper
          sx={{
            p: 1,
            bgcolor: 'white',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
          }}
      >
        <Typography
            variant="body2"
            sx={{
              flexGrow: 1,
              mr: 1,
              whiteSpace: 'nowrap',
              overflow: 'hidden',
              textOverflow: 'ellipsis',
            }}
        >
          {label}
        </Typography>
        <IconButton size="small" onClick={onDelete}>
          <DeleteIcon fontSize="inherit" />
        </IconButton>
      </Paper>
  );
}

/* --------------------------------------------------------------------
 *  ðŸ”œÂ NextÂ Step â€“Â Dragâ€‘&â€‘Drop
 *  -------------------------------------------------------------------
 *  â€“Â Installiere  @dnd-kit/core  @dnd-kit/sortable  @dnd-kit/modifiers
 *    und ersetze <Stack> durch <SortableContext>.
 *  â€“Â Das Stateâ€‘Store braucht dafÃ¼r eine moveNodeâ€‘/reorderNodesâ€‘Action.
 *  â€“Â Ich liefere dir dann den kompletten Codeâ€‘Patch, sobald du dndâ€‘kit
 *    in package.json hast.
 * ------------------------------------------------------------------ */
